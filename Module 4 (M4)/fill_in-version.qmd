---
title: "Project Title Here"
author: "Author Name Here"
date: "Current Date Here"
---





### **Module 4 (M4)**

#### **Part 1 (P1)** ET - Gaming Market Dynamics
---------------------------------------
**How does this tie to the journey?**
Step into the virtual realm of a game developer. With data as your guide, explore the ebb and flow of gaming trends. Use this insight to innovate, crafting the next gaming sensation that captivates a global audience.
---------------------------------------


##### Concept 1: Extract Game Data with `htmltab`

```{r}
library(htmltab)
games_df <- htmltab("https://en.wikipedia.org/wiki/2023_in_video_games", which = 4)
```
**Explanation**: `htmltab()` is used to extract data from HTML tables on web pages. Here, it retrieves the fourth table from the specified Wikipedia page, containing information about video games released in 2023.

##### Concept 2: Transform Data with `dplyr`

```{r}
library(lubridate)
library(dplyr)
fix_time_games_df <- games_df %>% 
  mutate(Release = mdy(Release)) %>%  # Convert release date to Date format
  mutate(`Average score` = as.numeric(`Average score`)) %>%  # Convert average score to numeric
  rename(Average_Score = `Average score`, Platforms = `Platform(s)`)  # Rename columns for easier reference
```
**Explanation**:
- `mutate(Release = mdy(Release))`: Uses `lubridate`'s `mdy()` function to convert the "Release" column from a string to a Date object.
- `mutate(Average score = as.numeric(Average score))`: Converts the "Average score" column to numeric type for calculations.
- `rename()`: Renames columns to remove spaces and special characters, facilitating easier access and manipulation.

##### Concept 2.1: Group by & Summarise

```{r}
summary_df <- fix_time_games_df %>% 
  group_by(Platforms) %>% 
  summarise(mean = mean(Average_Score, na.rm = TRUE),  # Calculate mean average score
            sd = sd(Average_Score, na.rm = TRUE),  # Calculate standard deviation
            ss = n())  # Count the number of entries
```
**Explanation**: Groups the data by the gaming platform, then calculates the mean score, standard deviation, and sample size for each group. This is crucial for understanding score distribution across platforms.

##### Concept 3: Visualize Data with `ggplot2` (Violin Plot)

```{r}
library(ggplot2)
# Create a violin plot
fix_time_games_df %>% 
  ggplot(aes(x = Platforms, y = Average_Score)) +
  geom_violin() +
  labs(title = "Average Score by Platform", x = "Platform", y = "Average Score") +
  ylim(88,100)  # Set Y-axis limits
```
**Explanation**: Creates a violin plot to visualize the distribution of average scores across different gaming platforms. Violin plots are useful for showing the density of the data at different values, combined with the box plot feature.

##### Concept 4: Visualize Data - Add Mean

```{r}
stat_summary(fun = mean, geom = "point", shape = 23, fill = "blue")  # Add mean score as a point
```
**Explanation**: Enhances the violin plot by adding a point to represent the mean average score for each platform, providing a clear visual indicator of the central tendency within the distribution. 

This breakdown transforms the script into a step-by-step data science workflow, demonstrating the journey from extracting web data to transforming and finally visualizing it in a meaningful way.

##### Concept 5: Putting it all together
```{r}
library(htmltab)
library(lubridate)
library(dplyr)
library(ggplot2)

games_df <- htmltab("https://en.wikipedia.org/wiki/2023_in_video_games",which = 4)
```


```{r}
fix_time_games_df <- games_df %>% 
  mutate(Release = mdy(Release)) %>% 
  mutate(`Average score` = as.numeric(`Average score`)) %>% 
  rename(Average_Score = `Average score`,
         Platforms = `Platform(s)` )
```


```{r}
fix_time_games_df %>% 
  ggplot(aes(x = Release, y = Average_Score, color = Platforms)) +
  geom_point() +
  geom_line() +
  labs(x = "Release Date", y = "Average Score", title = "Average Score by Platform over Time") +
  theme_custom()
```



```{r}
summary_df <- fix_time_games_df %>% 
  group_by(Platforms) %>% 
  summarise(mean = mean(Average_Score, na.rm = TRUE),
            sd = sd(Average_Score, na.rm = TRUE), ss = n())
```



```{r}
# Create a violin plot

fix_time_games_df %>% 
  ggplot( aes(x = Platforms, y = Average_Score)) +
  geom_violin() +
  stat_summary(fun = mean, geom = "point", shape = 23, fill = "blue") +
  labs(title = "Average Score by Platform", x = "Platform", y = "Average Score")  +
  ylim(88,100) +
  theme_custom()
```






#### ----------------------------------

#### **Part 2 (P2)** TV - Viral Content Creation
---------------------------------------
**How does this tie to the journey?**
Transition to a social media strategist at the forefront of digital entertainment. By understanding viral trends through data, you craft content that not only entertains but becomes a cultural touchstone, propelling your brand to new heights.
---------------------------------------
##### Concept 1: Extract: htmltabs
##### Concept 2: Transform: select, mutate
##### Concept 3: Transform: select, filter
##### Concept 4: Transform: select, filter, mutate
##### Concept 5: Visualize



```{r}
games_2022_df <- htmltab("https://en.wikipedia.org/wiki/2022_in_video_games",
                         which = 5) %>% 
  mutate(Year = 2022)
games_2023_df <- htmltab("https://en.wikipedia.org/wiki/2023_in_video_games",
                         which = 4) %>% 
  mutate(Year = 2023)
```


```{r}
games_bind_df <- games_2022_df %>% 
  bind_rows(games_2023_df) %>% 
  mutate(Release = mdy(Release)) %>% 
  mutate(`Average score` = as.numeric(`Average score`)) %>% 
  rename(Average_Score = `Average score`,
         Platforms = `Platform(s)` )
```





```{r}
games_bind_df %>% 
  ggplot(aes(x = Release, y = Average_Score, color = Platforms)) +
  geom_point() +
  geom_line() +
  labs(x = "Release Date", y = "Average Score", title = "Average Score by Platform over Time \n By Year") +
  facet_grid(.~Year) +
  theme_custom()
```


```{r}
games_bind_df %>% 
  group_by(Platforms,Year) %>% 
  summarise(mean = mean(Average_Score, na.rm = TRUE),
            sd = sd(Average_Score, na.rm = TRUE), ss = n())
```



```{r}
# Create a violin plot

games_bind_df %>% 
  ggplot( aes(x = Platforms, y = Average_Score)) +
  geom_violin() +
  stat_summary(fun = mean, geom = "point", shape = 23, fill = "blue") +
  labs(title = "Average Score by Platform", x = "Platform", y = "Average Score")  +
  ylim(88,100) +
  facet_grid(.~Year) +
  theme_custom()
```








## Weekend 2 Outline

