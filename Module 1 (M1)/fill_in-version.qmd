---
title: "Project Title Here"
author: "Author Name Here"
date: "Current Date Here"
---




### **Module 1 (M1)**

**How does this tie to the journey?**
Version 1:
These topics tie into the data science learning journey by providing the foundational tools and frameworks necessary for data manipulation, analysis, and visualization. Understanding how to install and utilize R packages enables learners to efficiently process and analyze large datasets, apply statistical models, and generate insightful visualizations, which are critical skills in the field of data science.

Version 2:

"Hey there! So, these topics we're talking about are super important if you're interested in data scienceâ€”that's like being a detective, but for numbers and patterns. Learning how to use R, which is a special tool for data science, is like learning how to use a new app on your phone. It helps you sort through tons of information, find cool trends, and make those awesome graphs and charts you see in science fairs. It's all about making sense of the data and telling a story with it. Pretty neat, right?" ðŸ˜„ðŸ“Š



#### **Part 1 (P1)** Basics of what is R

##### Concept 1: R and R Studio

- What is R?
- Solution: R is a programming language and environment designed for     
statistical computing and graphics.

- What is R Studio?
- Solution: RStudio is an integrated development environment (IDE) that 
provides a user-friendly interface for working with R.  

- Why R Studio?
- Solution: RStudio enhances the R experience by offering a powerful, 
cohesive toolset for data analysis, visualization, and programming in one 
interface.  

##### Concept 2: Panes 

- **Console**: The Console in R is the interactive interface allowing users to execute R commands and view their results immediately.

- **Files (Types)**:
- **R File**: An R file (`.R`) contains scripts written in R language, used for data analysis and visualization.
- **Quarto File**: A Quarto file (`.qmd`) is used for creating dynamic documents that can combine code execution with narrative text, images, and other content.

- **Environment**: The Environment in R refers to the workspace that holds user-defined variables, data sets, and functions during an R session.



##### Concept 3: R Packages and Libraries

- **What is an R package and library?**  
An R package is a collection of functions, data, and compiled code in a well-defined format, while the library is a directory where the packages are stored and managed.

- **How to install and load R packages?**  
To install R packages, use the `install.packages("packageName")` command, and to load them into an R session, use `library(packageName)`.

- **Some commonly used R packages**  
Commonly used R packages include `ggplot2` for data visualization, `dplyr` for data manipulation, `tidyr` for data tidying, and `shiny` for interactive web applications.




#### ----------------------------------




#### **Part 2 (P2)** Data Types - Vectors and Data frames

**How does this tie to the journey?**
**"Imagine organizing your game inventory: Vectors in R are like backpack slots, holding similar items, while data frames are like chests for different items, aiding data scientists in managing vast info like gamers strategize to win!" ðŸŽ®ðŸ“Š**

To create a new R code chunk in RStudio, you can use the shortcut:
- **Mac**: Cmd + Option + I
- **Windows/Linux**: Ctrl + Alt + I

#### Concept 1: Variable Type

- **Categorical Variables**: Represent categories and can have more than two possible values, like species types in the iris dataset.
```{r}
cat_var <- iris$Species # Species in the iris dataset
```

- **Categorical (Binary) Variable**: A special case of categorical variables with two possible values, such as "Yes" or "No".
```{r}
binary_var <- c("Yes", "No", "Yes") # Examples of binary variables
```


- **Quantitative Variables**: Represent numeric values at which numeric operations make sense, like Sepal Length in the iris dataset.
```{r}
cat_var <- iris$Sepal.Length # Species in the iris dataset
```


#### Concept 2: Vectors

- **Introducing Vectors**: Vectors are the simplest way to store data in R, holding elements of the same type.
```{r}
num_vec <- c(1, 2, 3) # Numeric vector
char_vec <- c("apple", "banana", "cherry") # Character vector
```

- **Numeric Vector**: Contains numeric (quantitative) values.
```{r}
num_vec <- c(1.1, 2.2, 3.3) # Example of a numeric vector
```

- **Character Vector**: Holds text strings. In R, strings and characters are treated similarly, used for storing textual data.
```{r}
char_vec <- c("apple", "banana", "cherry") # Example of a character vector
```

- **Accessing Vector Elements**: Elements within a vector can be accessed using square brackets `[]` and the index of the element.
```{r}
char_vec[2] # Access the second element of char_vec
```





#### Concept 3: Data Frames

- **What is a data frame?**
A data frame is a table or a two-dimensional array-like structure in which each column contains values of one variable and each row contains one set of values from each column.
```{r}
df <- data.frame(age = c(15,16,17), grade_in_class = c("A", "B", "A-"))
```

- **What are rows?**
Rows in a data frame represent observations or records.
```{r}
df[1, ] # Access the first row
```

- **What are columns?**
Columns in a data frame represent variables.
```{r}
df[, 1] # Access the "Number" column
```

- **How to access rows and columns within a data frame?**
You can access rows and columns within a data frame using square brackets `[,]` with row indices before the comma and column indices or names after the comma.
```{r}
df[1, 2] # Access the first row and "Number" column
```





#### Concept 4: Lists

- **What is a list?**
A list in R is an ordered collection of objects, which can be of different types and structures.
```{r}
lst <- list(number = 42, name = "R", data = df)
```

- **How to access items within a list**
You can access items within a list using double square brackets `[[]]` for index or single square brackets `[]` with the item name.
```{r}
lst[["name"]] # Access the "name" item
lst$name # Another way to access the "name" item
lst[[1]]
```








