


### Additional Notes:

####M** stands for Module.
- Modules 0-8 are planned, with each having two parts.
- Each part covers 4-5 concepts.

This structure allows high school students to progressively build up their knowledge over the three weekends leading to the hackathon, covering data extraction, transformation, visualization, and application within the context of real-world datasets from Spotify and sports.




### **Additional Content: Creating a Sports, Spotify, Function Data Library**
   - Introduction to sports data libraries, focusing on basketball and football.
   - Understanding observational units within team data.
   - Cleaning data and preparing for analysis.
   - Ensuring data is in a tidy format for easy use.

This structured series provides a comprehensive roadmap for participants to learn and apply data science concepts in preparation for the hackathon.




To organize the provided list effectively, it can be structured into distinct sections: "Video Content & Structure," "Educational & Engagement Strategy," and "Hackathon Engagement & Assessment." This organization aims to clarify the goals for video creation, engagement strategies, and assessment mechanisms for a data science hackathon series.

### Video Content & Structure
1. **Duration and Introduction**
   - Ensure videos are less than 10 minutes, ideally between 8 to 10 minutes.
   - Include an introductory video for each installment, incorporating elements of hip-hop at the beginning to engage viewers.

2. **Content Focus**
   - Emphasize the excitement of data gathering and transformation. Frame the videos around answering common questions students might have about data.

3. **Consistency and Branding**
   - Use a consistent and captivating data science-themed thumbnail for each video.
   - Design videos to be appealing for potential use in summer camps.

4. **Educational Summaries**
   - Conclude the series with a summary of the tools used throughout, showcasing cumulative learning outcomes.

### Educational & Engagement Strategy
1. **Learning Aids**
   - Provide a glossary or appendix in the video description or as a handout. Include definitions for key terms like "string," "data frame," or "console" to aid comprehension without rewatching videos.

2. **Interactive Elements**
   - Allow students to access the glossary through clickable links within the YouTube description or accompanying quizzes.

3. **Visual Aids**
   - Incorporate GIFs, especially those starting with 331, to visually explain the action of dplyr verbs in R.

4. **Resource Accessibility**
   - Host the glossary on a dedicated website for easy reference.

### Hackathon Engagement & Assessment
1. **Question Design**
   - Include 10 to 15 questions per video, focusing primarily on coding but also covering the purpose of certain functions, code correction, modifications, and data type specifications.

2. **Progressive Difficulty**
   - Design questions to gradually increase in difficulty and include reviews of concepts from previous videos. This approach aims to ensure a solid understanding for the actual hackathon.

3. **Question Formats**
   - Utilize multiple-choice, coding exercises, and multiple-answer questions to assess student understanding comprehensively.

4. **Data Storage**
   - Explore possibilities for securely storing participant data within a database.

This organized approach highlights the key aspects of video production, educational engagement, and assessment strategy, ensuring a structured and effective learning experience for students participating in the data science hackathon series.



Incorporating the practice of the five main `dplyr` verbs (select, filter, mutate, summarize, and arrange) in various combinations into the educational content will significantly enhance the learning experience. The strategy involves utilizing `learnr` tutorials for interactive learning and `grader` for automatic feedback, along with database integration for tracking progress. This approach is designed to assess and grade student growth over a three-week period effectively. Below is an expanded framework of the outline that includes this aspect, along with instructions for compiling this into a Quarto document.

### Expanded Framework with dplyr Verbs Practice

#### Educational Content Enhancement

1. **Interactive Tutorials with `learnr`**
   - Develop `learnr` tutorials that introduce and provide practice on the five main `dplyr` verbs: select, filter, mutate, summarize, and arrange. These tutorials should be designed to accommodate learners at different stages, with exercises ranging from basic to advanced usage of each verb.

2. **Combination Practices**
   - Create exercises that require students to use combinations of the dplyr verbs in 5*4*3 ways, such as select → filter → mutate, or simpler combinations like just select. This approach encourages students to understand how these verbs can be used together to manipulate and analyze data in R effectively.

3. **Assessment and Feedback with `grader`**
   - Utilize the `grader` package to provide immediate feedback on the students' exercises. This tool can automatically assess the accuracy of the students' code and offer hints or corrections, thereby facilitating a self-paced learning environment.

4. **Database Connection for Progress Tracking**
   - Integrate the learning platform with a database to store students' progress data. This setup will allow for the monitoring of student growth over the three-week period, enabling instructors to identify areas where students excel or need further improvement.

5. **Weekly Growth Grading**
   - Implement a grading system that evaluates students' growth based on their performance in the `learnr` tutorials and their ability to effectively use the `dplyr` verbs in various combinations. This system should account for improvement over time, encouraging students to develop their skills progressively.

#### Compilation into a Quarto Document

To compile all of the educational content, including the dplyr verbs practice framework, into a Quarto document, follow these steps:

1. **Quarto Installation and Setup**
   - Ensure that Quarto is installed and set up in your environment. Quarto can compile documents that include R code, making it an ideal choice for this project.

2. **Document Structure**
   - Begin the Quarto document (`*.qmd` file) with a YAML header specifying title, author, and output format (e.g., HTML, PDF). Then, structure the document into sections reflecting the outline above, including headers for each main point.

3. **Incorporating R Code and `learnr` Tutorials**
   - Include R code chunks where necessary, especially for demonstrating examples of `dplyr` verb usage or illustrating how to set up `learnr` tutorials and `grader` feedback. Quarto will execute these chunks and include their output in the compiled document.

4. **Embedding Interactive Content**
   - While Quarto can incorporate R code and its output directly, embedding fully interactive `learnr` tutorials within the Quarto document itself may require hosting the tutorials on a separate platform and linking to them from the document. Provide instructions or URLs for accessing these tutorials.

5. **Database Integration Details**
   - Describe the database integration for tracking student progress in a section of the Quarto document. Include code snippets or pseudocode to illustrate how data might be captured and analyzed.

6. **Compilation and Distribution**
   - Compile the Quarto document into your chosen format (HTML is recommended for interactivity). Distribute the compiled document to educators and students as a comprehensive guide to the educational content and practice framework.

This expanded framework, once compiled into a Quarto document, will serve as a detailed and interactive educational resource, facilitating an engaging and effective learning experience for students exploring data science through `dplyr` in R.