---
title: "Project Title Here"
author: "Author Name Here"
date: "Current Date Here"
---






### **Module 3 (M3)**

#### **Part 1 (P1)** ET - Community Insights for Public Policy

---------------------------------------

**How does this tie to the journey?**

Picture yourself collaborating with state officials, wielding data to inform policy decisions. Your analysis of community demographics and needs illuminates the path to impactful legislation and improved civic life.
---------------------------------------
##### Concept 1: Extract - htmltab



Extracting data is our first step. We'll use a function similar to `htmltab` to pull the list of counties directly from the Wikipedia page.

The `which` argument lets us specify which table on the page we're interested in, as pages often contain multiple tables.

```{r}
# library(htmltab)
# library(dplyr)
url <- "https://en.wikipedia.org/wiki/List_of_counties_in_California"
california_counties_df <- htmltab(url, which = 2)


california_counties_df <- california_counties_df %>% 
  rename(Population = `Population(2023)`,
         Established = Est.)

```


##### Concept 2a: Transform - str_remove_all & as.numeric

First, we remove commas from the population figures, making them easier to work with as numeric values. 

Then, we convert the cleaned population data from strings to actual numeric values.

```{r}
# library(stringr)
## I am going to keep using clean clean_california_counties_df
## This is not always done in the real world
clean_california_counties_df <- california_counties_df %>%
  mutate(Population = str_remove_all(Population,",")) %>% 
  mutate(Population = as.numeric(Population))

```

##### Concept 2b: Transform - Adding & Select a variables

```{r}

## To create more variables
clean_california_counties_df <- clean_california_counties_df %>%
  mutate(State = "CA") %>% 
  mutate(Established = as.numeric(Established)) %>% 
  mutate(Est_before_1853 = ifelse(Established<=1853,"Yes","No"))

## To make the code more neat
clean_california_counties_df <- clean_california_counties_df %>% 
  select(State, Population, County, Est_before_1853)

```



##### Concept 3: Visualize - geom violin plot

A violin plot is a method of plotting numeric data and can be thought of as a combination of a box plot and a kernel density plot. It provides a deeper understanding of the distribution of the data.

```{r}

library(ggplot2)
clean_california_counties_df %>% 
  ggplot(aes(x=Est_before_1853, y=Population)) + 
  geom_violin(trim=FALSE) 
```

This code will create a violin plot for the population of counties in California, giving a visual representation of the distribution of population sizes.

##### Concept 4: Visualize - labels & theme_custom

Adding labels and themes can make your plots more informative and aesthetically pleasing. The `theme_custom()` function gives a clean, white background to your plots.

```{r}
# library(scales)
# library(gato365dsh2024)
clean_california_counties_df %>% 
  ggplot(aes(x=Est_before_1853, y=Population)) + 
  geom_violin(trim=FALSE) +
  labs(title="Population Distribution in California Counties \n Based on when they were established",
       x="Established Before 1853",
       y="Population") #+
  # scale_y_continuous(labels = label_number(accuracy = 0.1)) +
  # theme_custom()
```

This code will produce a violin plot with a title and axis labels, set against a clean, white background theme. It's a great way to present your data in a clear and professional manner.


#### ----------------------------------





#### **Part 2 (P2)** TV - Enhancing State Services with Data
---------------------------------------

**How does this tie to the journey?**
As you dive into the world of social media analytics, your focus shifts to understanding the digital landscape. By examining the data from the most-followed TikTok accounts, you develop insights into online engagement trends. This knowledge helps you devise innovative approaches to digital marketing, ultimately enhancing the online presence and influence of your state's initiatives.
---------------------------------------


##### Concept 1: Extract the data


```{r}
library(htmltab)
url <- "https://en.wikipedia.org/wiki/List_of_most-followed_TikTok_accounts"
tiktok_df <- htmltab(url, which = 1)

```

##### Concept 2: Transform - mutate Followers and Likes into numeric

```{r}
## Again we 
clean_tiktok_df <- tiktok_df %>%
  mutate(Followers_Millions = as.numeric(`Followers(millions)`)) %>%
  mutate(Likes_Billions = as.numeric(`Likes(billions)`))
```



##### Concept 3: Transform - str_detect: based on description detect if person is social media personality or not  
```{r}
clean_tiktok_df <- clean_tiktok_df %>%
  mutate(Is_Social_Media_Personality = ifelse(str_detect(Description, "Social media personality"), TRUE, FALSE))
```





##### Concept 4: Visualize - geom point: follower vs likes

```{r}
## 
clean_tiktok_df %>% 
ggplot(aes(x=Followers_Millions, y=Likes_Billions)) +
  geom_point() + 
  theme_custom()
```




##### Concept 5: Visualize - color by social media personality or not and labels 
```{r}
clean_tiktok_df %>% 
  ggplot(aes(x=Followers_Millions, y=Likes_Billions, color=Is_Social_Media_Personality)) +
  geom_point() +
  # scale_color_manual(values=c("blue", "red")) +
  labs(title="Followers vs Likes on TikTok",
       x="Number of Followers",
       y="Number of Likes",
       color="Is Social Media Personality") +
  theme_custom()

```








